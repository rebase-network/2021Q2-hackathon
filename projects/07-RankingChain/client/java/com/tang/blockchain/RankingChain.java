package com.tang.blockchain;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class RankingChain extends Contract {
    private static final String BINARY = "0x608060405260006002556001600355600060055560405161151f38038061151f8339818101604052604081101561003557600080fd5b81019080805190602001909291908051906020019092919050505033600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060028190555060008060006101000a81548160ff021916908360028111156100f757fe5b021790555050506114128061010d6000396000f3fe6080604052600436106100e85760003560e01c80638a843fee1161008a578063d2a14d7811610059578063d2a14d7814610339578063da249db114610364578063df72cdbf146103e5578063ee305fc814610410576100e8565b80638a843fee1461027e5780639a0e7d6614610295578063a445fd6a146102c0578063c7d0767e1461030e576100e8565b80635ae9a549116100c65780635ae9a5491461019e57806366ca626a146101c95780636b1f69a5146101f457806385a3863514610267576100e8565b80630d6a1da1146100ed5780632ef796af14610104578063575292511461012f575b600080fd5b3480156100f957600080fd5b5061010261043b565b005b34801561011057600080fd5b506101196105fc565b6040518082815260200191505060405180910390f35b34801561013b57600080fd5b5061019c6004803603608081101561015257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050610603565b005b3480156101aa57600080fd5b506101b361078c565b6040518082815260200191505060405180910390f35b3480156101d557600080fd5b506101de61082f565b6040518082815260200191505060405180910390f35b34801561020057600080fd5b5061022d6004803603602081101561021757600080fd5b8101908080359060200190929190505050610839565b604051808473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b34801561027357600080fd5b5061027c610894565b005b34801561028a57600080fd5b5061029361095a565b005b3480156102a157600080fd5b506102aa610a18565b6040518082815260200191505060405180910390f35b61030c600480360360408110156102d657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610abb565b005b34801561031a57600080fd5b50610323610c16565b6040518082815260200191505060405180910390f35b34801561034557600080fd5b5061034e610cb8565b6040518082815260200191505060405180910390f35b34801561037057600080fd5b5061039d6004803603602081101561038757600080fd5b8101908080359060200190929190505050610cbf565b604051808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b3480156103f157600080fd5b506103fa610d25565b6040518082815260200191505060405180910390f35b34801561041c57600080fd5b50610425610dc7565b6040518082815260200191505060405180910390f35b60028081111561044757fe5b60008054906101000a900460ff16600281111561046057fe5b146104d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f7374617465206572726f7200000000000000000000000000000000000000000081525060200191505060405180910390fd5b6104db610e6d565b6104e36110a8565b60005b6103f4805490508110156105f9576103f3546103f4828154811061050657fe5b906000526020600020906003020160010154600554028161052357fe5b046103f4828154811061053257fe5b9060005260206000209060030201600201819055506103f4818154811061055557fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6103f483815481106105ae57fe5b9060005260206000209060030201600201549081150290604051600060405180830381858888f193505050501580156105eb573d6000803e3d6000fd5b5080806001019150506104e6565b50565b6103f25481565b6001600281111561061057fe5b60008054906101000a900460ff16600281111561062957fe5b1461069c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f7374617465206572726f7200000000000000000000000000000000000000000081525060200191505060405180910390fd5b60046040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020016000815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015550508260056000828254019250508190555050505050565b600060028081111561079a57fe5b60008054906101000a900460ff1660028111156107b357fe5b14610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f7374617465206572726f7200000000000000000000000000000000000000000081525060200191505060405180910390fd5b6103f254905090565b6000600354905090565b6103f4818154811061084a57600080fd5b90600052602060002090600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b600160028111156108a157fe5b60008054906101000a900460ff1660028111156108ba57fe5b1461092d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f7374617465206572726f7200000000000000000000000000000000000000000081525060200191505060405180910390fd5b60026000806101000a81548160ff0219169083600281111561094b57fe5b0217905550610958611347565b565b6000600281111561096757fe5b60008054906101000a900460ff16600281111561098057fe5b146109f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f7374617465206572726f7200000000000000000000000000000000000000000081525060200191505060405180910390fd5b60016000806101000a81548160ff02191690836002811115610a1157fe5b0217905550565b600060016002811115610a2757fe5b60008054906101000a900460ff166002811115610a4057fe5b14610ab3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f7374617465206572726f7200000000000000000000000000000000000000000081525060200191505060405180910390fd5b600554905090565b60006002811115610ac857fe5b60008054906101000a900460ff166002811115610ae157fe5b14610b54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f7374617465206572726f7200000000000000000000000000000000000000000081525060200191505060405180910390fd5b600060025414610bca57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6002549081150290604051600060405180830381858888f19350505050158015610bc8573d6000803e3d6000fd5b505b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002819055505050565b6000600280811115610c2457fe5b60008054906101000a900460ff166002811115610c3d57fe5b14610cb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f7374617465206572726f7200000000000000000000000000000000000000000081525060200191505060405180910390fd5b600754905090565b6103f15481565b60048181548110610ccf57600080fd5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154905085565b6000600280811115610d3357fe5b60008054906101000a900460ff166002811115610d4c57fe5b14610dbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f7374617465206572726f7200000000000000000000000000000000000000000081525060200191505060405180910390fd5b600654905090565b600060016002811115610dd657fe5b60008054906101000a900460ff166002811115610def57fe5b14610e62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f7374617465206572726f7200000000000000000000000000000000000000000081525060200191505060405180910390fd5b600480549050905090565b600280811115610e7957fe5b60008054906101000a900460ff166002811115610e9257fe5b14610f05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f7374617465206572726f7200000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008060005b6004805490508110156110a35760065460048281548110610f2857fe5b9060005260206000209060050201600201541015610f755760065460048281548110610f5057fe5b9060005260206000209060050201600201546101f40281610f6d57fe5b049250610fa6565b60048181548110610f8257fe5b9060005260206000209060050201600201546006546101f40281610fa257fe5b0492505b60075460048281548110610fb657fe5b90600052602060002090600502016003015410156110035760075460048281548110610fde57fe5b9060005260206000209060050201600301546101f40281610ffb57fe5b049150611034565b6004818154811061101057fe5b9060005260206000209060050201600301546007546101f4028161103057fe5b0491505b8183016004828154811061104457fe5b90600052602060002090600502016004018190555060086004828154811061106857fe5b9060005260206000209060050201600401546103e9811061108557fe5b01600081548092919060010191905055508080600101915050610f0b565b505050565b6002808111156110b457fe5b60008054906101000a900460ff1660028111156110cd57fe5b14611140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f7374617465206572726f7200000000000000000000000000000000000000000081525060200191505060405180910390fd5b600a6003600480549050028161115257fe5b046103f2819055506000806103e890505b60008111156111a5576008816103e9811061117a57fe5b0154820191506103f254821061119757806103f1819055506111a5565b808060019003915050611163565b50600080600090505b600480549050811015611342576103f154600482815481106111cc57fe5b90600052602060002090600502016004015410156111e957611335565b600481815481106111f657fe5b9060005260206000209060050201600101546004828154811061121557fe5b9060005260206000209060050201600401540291506103f460405180606001604052806004848154811061124557fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020016000815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050816103f3600082825401925050819055505b80806001019150506111ae565b505050565b60008060005b6004805490508110156113ad576004818154811061136757fe5b906000526020600020906005020160020154830192506004818154811061138a57fe5b90600052602060002090600502016003015482019150808060010191505061134d565b5060048054905082816113bc57fe5b0460068190555060048054905081816113d157fe5b04600781905550505056fea2646970667358221220445a3e458aec2f758161991ed921b3f4d759fdb48c9aae757555f95408a40e8764736f6c63430007050033";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
    }

    protected RankingChain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected RankingChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RemoteCall<RankingChain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _sponsorAccount, BigInteger _Bonus) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_sponsorAccount), 
                new org.web3j.abi.datatypes.generated.Uint256(_Bonus)));
        return deployRemoteCall(RankingChain.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<RankingChain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _sponsorAccount, BigInteger _Bonus) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_sponsorAccount), 
                new org.web3j.abi.datatypes.generated.Uint256(_Bonus)));
        return deployRemoteCall(RankingChain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> bonusInfo(BigInteger param0) {
        final Function function = new Function(
                "bonusInfo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> participantInfo(BigInteger param0) {
        final Function function = new Function(
                "participantInfo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rewardNum() {
        final Function function = new Function(
                "rewardNum", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rewardRank() {
        final Function function = new Function(
                "rewardRank", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateSponsorInfo(String userAccount, BigInteger newBons) {
        final Function function = new Function(
                "updateSponsorInfo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userAccount), 
                new org.web3j.abi.datatypes.generated.Uint256(newBons)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> InitiationEnd() {
        final Function function = new Function(
                "InitiationEnd", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateVotingInfo(String account, BigInteger voting, BigInteger score, BigInteger boxOffice) {
        final Function function = new Function(
                "updateVotingInfo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account), 
                new org.web3j.abi.datatypes.generated.Uint256(voting), 
                new org.web3j.abi.datatypes.generated.Uint256(score), 
                new org.web3j.abi.datatypes.generated.Uint256(boxOffice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getTotalVotes() {
        final Function function = new Function(
                "getTotalVotes", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getParticipantNum() {
        final Function function = new Function(
                "getParticipantNum", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> votingEnd() {
        final Function function = new Function(
                "votingEnd", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getAverageScore() {
        final Function function = new Function(
                "getAverageScore", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getAverageBoxOffice() {
        final Function function = new Function(
                "getAverageBoxOffice", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getRewardNum() {
        final Function function = new Function(
                "getRewardNum", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> assignBonus() {
        final Function function = new Function(
                "assignBonus", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> TestOk() {
        final Function function = new Function(
                "TestOk", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RankingChain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new RankingChain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static RankingChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RankingChain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
