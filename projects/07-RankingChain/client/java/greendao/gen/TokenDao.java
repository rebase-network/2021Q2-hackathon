package greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tang.blockchain.Token;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOKEN".
*/
public class TokenDao extends AbstractDao<Token, Long> {

    public static final String TABLENAME = "TOKEN";

    /**
     * Properties of entity Token.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WalletAddrges = new Property(1, String.class, "walletAddrges", false, "WALLET_ADDRGES");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Symbol = new Property(4, String.class, "symbol", false, "SYMBOL");
        public final static Property Decimals = new Property(5, int.class, "decimals", false, "DECIMALS");
        public final static Property Balance = new Property(6, String.class, "balance", false, "BALANCE");
        public final static Property Value = new Property(7, String.class, "value", false, "VALUE");
        public final static Property IsDisply = new Property(8, boolean.class, "IsDisply", false, "IS_DISPLY");
    }


    public TokenDao(DaoConfig config) {
        super(config);
    }
    
    public TokenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOKEN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WALLET_ADDRGES\" TEXT," + // 1: walletAddrges
                "\"ADDRESS\" TEXT," + // 2: address
                "\"NAME\" TEXT," + // 3: name
                "\"SYMBOL\" TEXT," + // 4: symbol
                "\"DECIMALS\" INTEGER NOT NULL ," + // 5: decimals
                "\"BALANCE\" TEXT," + // 6: balance
                "\"VALUE\" TEXT," + // 7: value
                "\"IS_DISPLY\" INTEGER NOT NULL );"); // 8: IsDisply
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOKEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Token entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String walletAddrges = entity.getWalletAddrges();
        if (walletAddrges != null) {
            stmt.bindString(2, walletAddrges);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(5, symbol);
        }
        stmt.bindLong(6, entity.getDecimals());
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(7, balance);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(8, value);
        }
        stmt.bindLong(9, entity.getIsDisply() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Token entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String walletAddrges = entity.getWalletAddrges();
        if (walletAddrges != null) {
            stmt.bindString(2, walletAddrges);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(5, symbol);
        }
        stmt.bindLong(6, entity.getDecimals());
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(7, balance);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(8, value);
        }
        stmt.bindLong(9, entity.getIsDisply() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Token readEntity(Cursor cursor, int offset) {
        Token entity = new Token( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // walletAddrges
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // symbol
            cursor.getInt(offset + 5), // decimals
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // balance
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // value
            cursor.getShort(offset + 8) != 0 // IsDisply
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Token entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWalletAddrges(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSymbol(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDecimals(cursor.getInt(offset + 5));
        entity.setBalance(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setValue(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsDisply(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Token entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Token entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Token entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
